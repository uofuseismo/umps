/*!
\page TopicLogging Logging
\ingroup Logging_Introduction

<p>
As applications move into production, we cannot be required to stare at a terminal all day so as to monitor the program output.  This activity is not only monotonous but it is typically pointless since production applications generally work just fine and therefore have nothing to report.  For these reasons, it is important that production code, which will likely run as a daemon process, have a logging facility.  The logging facilities provided by UMPS build upon <a href="https://github.com/gabime/spdlog">SpdLog</a>.  While SpdLog has more options, we limit our logging to just four levels:
</p>

\include umps/logging/level.hpp

The following describes what type of behavior you should expect from UMPS for a given message

   - \em Error is for error messages.  Error messages typically correspond to an UMPS function throwing an error.  When UMPS throws an error you will have to deal with it or your application will crash.
   - \em Warn is for warning messages.  Warning messages typically correspond to UMPS function making a decision and lurching forward.  Warnings are not great and should be dealt with in a timely manner. 
   - \em Info is for information messages.  Information messages typically correspond to a successful event that UMPS deems important like a connection being established.  Info is the default logging level for the loggers provided by UMPS.
   - \em Debug is for debugging messages.  Debug messages are extraordinarily granular and typically only useful while actively debugging a program.

Should you find the provided loggers insufficient you can create your own logger.  In this case, you will derive from the ILog base class:

\include umps/logging/log.hpp

Again, we are describing an abstract base class where you must

   - report on the logger's logging level.
   - define an action for an error message.
   - define an action for a warning message.
   - define an action for an info message.
   - define an action for a debug message.

By using dependency injection in constructors will then be enable you to permeate your logger through UMPS.

*/
