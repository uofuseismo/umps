/*!
\page TopicAuthentication_Keypairs Generating Key Pairs
\ingroup Authentication_Utilities

<p>
For users using the Stonehouse security model, you will have to generate a public/private keypair.  A standalone program for this activity is uKeyPair.  You can get an overview of the program 
</p>

     uKeyPair --help

<p>
However, you probably want to jump right in.  So let's make an example
</p>

     uKeyPair --publickey examplePublicKey.txt --privatekey examplePrivateKey.txt --keyname 'keys for uOperator@example server'

<p>
Here, you are specifying the public and private key file names.  Additionally, the keyname argument is a little reminder for yourself should ever read see these files and wonder - to which machine does this key pair actually help me connect?  This program should generate your public key (examplePublicKey.txt) and your private key (exmaplePrivateKey.txt).  You should also check the permissions on these files to ensure that the public key is read/write/executable by you and only readable by others (644) whereas the private key is only read/write/executable (600) by you.
</p>

<p>
Normally, these files should be installed into
</p>

     mv examplePublicKey.txt  ${HOME}/.local/share/UMPS/keys
     mv examplePrivateKey.txt ${HOME}/.local/share/UMPS/keys

A script to help you create a public/private key pair might look like

    #!/usr/bin/bash
    # Name of the key pair.  Pick something better in real life.
    key_name=$(hostname)-${USER}
    # The destination to install the keys.  This is the recommended location
    # but another sensible directory is ~/.ssh/
    destination=${HOME}/.local/share/UMPS/keys
    # Ensure the directory exists
    if [ ! -d ${destination} ]; then
       mkdir -p ${destination}
    fi
    public_key=${destination}/${key_name}PublicKey.txt
    private_key=${destination}/${key_name}PrivateKey.txt
    if [ -e ${public_key} ]; then
       echo "Removing public key: ${public_key}"
       echo "Removing private key: ${private_key}"
    fi
    # Generate the key pair.  Again, pick a better comment. 
    uKeyPair --publickey ${public_key} --privatekey ${private_key} --keyname 'keys for uOperator@example server'
    # Permissions should be done by the application but better safe than sorry
    chmod 700 ${destination}
    chmod 644 ${public_key}
    chmod 600 ${private_key}

Next, you must perform the actual key exchange.  The algorithm is as follows:

   1. Connect to the machine running uOperator.  Note, this actually requires you to have login credentials on this machine.
   2. Switching users to the user running uOperator.
   3. Copy your **public** key to ${HOME}/.local/share/UMPS/keys or wherever public keys are installed on the machine running the uOperator.  This information should be in the uOperator initialization file.
   4. Download a copy of the the uOperator's **public** key from ${HOME}/.local/share/UMPS/keys or wherever public keys are installed on the machine running the uOperator.

As a specific example, you (or your system administrator) may install your public key on the uOperator machine using

    scp ${HOME}/.local/share/UMPS/keys/THIS_SERVERS_PUBLIC_KEY.txt UOPERATOR_USER@UOPERATOR_SERVER:${HOME}/.local/share/UMPS/keys/

and obtain the uOperator's public key for this machine using

    scp UOPERATOR_USER@UOPERATOR_SERVER:${HOME}/.local/share/UMPS/keys/UOPERATOR_PUBLIC_KEY.txt ${HOME}/.local/share/UMPS/keys/

*/
