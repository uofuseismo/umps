/*!
\defgroup MessagingPatterns_PubSub Publisher-Subscriber Patterns
\ingroup MessagingPatterns_chapter

<p>
This pattern can be thought of as listening to the radio. The radio (publisher) will broadcast its content. The listener (subscriber) will then tune-in to hear the content. This conceptually simple pattern provides excellent one-to-many scalability. However, the subscriber will miss all content if it is not connected to the data feed. One caveat is that communication is a one-way street in that the publisher broadcasts and the subscriber listens. If your use-case requires the subscriber send information to the publisher then this messaging pattern will not work.
</p>

\defgroup MessagingPatterns_PubSub_PubSub Publisher-Subscriber
\ingroup MessagingPatterns_PubSub
\brief The publisher-subscriber pattern is the simplest communication mechanism.  It is included for pedagogical purposes only.  Here, multiple consumers receive messages from one producer. 

\section TopicMessagingPatterns_PubSub_Overview Pub-Sub Messaging Overview
\ingroup MessagingPatterns_PubSub_PubSub

<p>
This is the most naive messaging strategy available in UMPS.  All that happens are that messages are sent from a producer to consumers.  This pattern exists for educational and testing purposes and should not be used in production code.
</p>

<br>
\image html pubsub.jpg "The publisher-subscriber pattern.  Here, three subscribers receive messages from one publisher." width=400cm
<br>

Despite its simplicity the pub-sub pattern is important.  From an application standpoint, it is the mechanism that will allow UMPS to distribute data packets, heartbeat messages, pick messages, earthquake messages, etc.  This pattern also will allow me to introduce preliminary concepts like the distinction between \em connecting and \em binding.

\section TopicMessagingPatterns_PubSub_Example An Example
\ingroup MessagingPatterns_PubSub_PubSub
 
<p>
In this example, a publisher will send a handful of text messages to three subscribers.
</p>

\subsection TopicMessagingPatterns_PubSub_ExamplePublisher The Publisher

<p>
The important points in this code snippet are that the publisher \em binds to an endpoint, defines a message to send, then sends the message in a non-blocking way.  Notice that the publisher does not care whether or not the subscriber receives the messages.
</p>
 
\include pubSub/publisher.cpp

\subsection TopicMessagingPatterns_PubSub_ExampleSubscriber The Subscriber

<p>
The important points are that the subscriber \em connects to an endpoint, receives a pre-agreed upon number of messages, and returns.  It is important to consider the blocking (waiting) behavior of the subscriber.  If the default is to block indefinitely until a message is received then in this example the program may hang.  For this reason, we actually connect the subscriber to the publisher before the publisher is created.  You may want to pause for a moment to let that sink in - ZeroMQ allows the subscriber to connect prior to the publisher binding to the socket.  
</p>

\include pubSub/subscriber.cpp

\subsection TopicMessagingPatterns_PubSub_ExampleDriver The Driver

<p>
Here is the example driver code that launches this example.  We create four threads - a publisher and three subscribers.  The subscribers connect first then will block until a message is received.  Then the publisher is started.  Since this code is brittle, the publisher code pauses after initialization to deal with something called the slow-joiner problem (basically, ZeroMQ has to do some asynchronous work behind the scenes that takes time).  In practice, we do not pause since we never send a predefined number of messages in a pub-sub pattern.
</p>

\include pubSub/main.cpp

\subsection TopicMessagingPatterns_PubSub_Conclusion Summary

The pub-sub is a foundational pattern in messaging that is provides a natural solution for handling streaming data.  Additionally, the concepts of binding and connecting were introduced.  Despite this, the alert reader is likely asking - what if I have multiple producers?  The answer to that question is the \ref MessagingPatterns_PubSub_XPubXSub pattern.

*/

/*!
\defgroup MessagingPatterns_PubSub_XPubXSub Extended Publisher-Subscriber
\brief A fully asynchronous publish-subscribe mechanism whereby a forwarder (proxy) relays messages from multiple publishers to multiple subscribers.
\ingroup MessagingPatterns_PubSub

<p>
Despite its simplicitly the \ref MessagingPatterns_PubSub_PubSub is not sufficient in practice.  For real applications, where we may have multiple data sources (e.g., UUSS field instruments telemetered to import boxes and data streams from other networks served through <a href="https://ds.iris.edu/ds/nodes/dmc/">IRIS</a>).  Clearly, we will have multiple data publishers.  Of course, it is possible to perpetually add a subscriber for each data feed in our applications but this will become cumbersome and difficult to maintain; particularly when a data feed is dropped.  What we really want is one-stop shopping.  If a subscriber connects to a particular endpoint then it will be able to receive every message in the data feed, i.e., the subscriber need not know the details of every publisher.  For this reason, we introduce the extended publisher-subscriber or xPub-xSub.  As a rule, even if I were considering a single producer and single consumer application, I would still implement it as a xPub-xSub pattern because experience dictates that even in well-planned applications more publishers always manage to materialize.
</p>

<br>
\image html xpubxsub.jpg "The extended publisher-subscriber (xPub-xSub) pattern.  Here four subscribers receive messages from three publishers." width=400cm
<br>

<p>
The technology required to make this happen is to introduce a middleman or \em proxy.  The proxy provides a stable endpoint to which publishers send data and subscribers retrieve data.  In the parlence of ZeroMQ data goes into the proxy's \em frontend and data goes out the proxy's backend.
</p>

\section TopicMessagingPatterns_XPubXSub_Example An Example
\ingroup MessagingPatterns_PubSub_XPubXSub

There really is not much more to this pattern than what you have already seen in the \ref TopicMessagingPatterns_PubSub_Example.  In principle, data is again being sent from producers to subscribers.  The main differences are that instead of one publisher we will have three, the number of subscribers is increased from three to four, and there is a proxy.  

\subsection TopicMessagingPatterns_XPubXSub_Publisher The Publisher

The publisher is like the previous pub-sub publisher.  However, it \em connects to the proxy.  In the verbiage of ZeroMQ we \em bind to \em stable endpoints.  Hence, UMPS views content producers and subscribers as ephemeral and proxies as long-lifetime, stable endpoints.  Consequently, your modules will always connect to the uOperator. 

\include xPubXSub/publisher.cpp

\subsection TopicMessagingPatterns_XPubXSub_Subscriber The Subscriber

The subscriber is exactly like the pub-sub subscriber.  In fact, you can use a pub-sub subscriber to connect to the proxy's backend and things will work.

\include xPubXSub/subscriber.cpp

\subsection TopicMessagingPatterns_XPubXSub_Proxy The Proxy

The proxy is a new concept.  What this thread does is simply take data from the input port (frontend) and stick it on output port (backend).  Its a worker whose job is to simply take items from one conveyer belt and put them on an adjacent conveyer belt.  Surprisingly, this remarkably simple mechanism seems sufficient for many broadcast applications. 

\include xPubXSub/proxy.cpp

Notice that the proxy is running as another thread that must be started and stopped.  This is because the proxy is supposed to stay up indefinitely.  In general, you will not have to explicitly think about this since the uOperator will be responsible for keeping these proxies alive and open.  All you will have to do is connect via the extended publisher or extended subscriber.

\subsection TopicMessagingPatterns_XPubXSub_ExampleDriver The Driver

Lastly, the driver code that launches this example. We create seven threads - three publishers and four subscribers. The subscribers connect first then will block until a message is received. Then the publishers are started. Again, this is a brittle code since we are specifying a priori the number of messages.  Therefore, the producer code must contend with the slow joiner problem

\include xPubXSub/main.cpp

\subsection TopicMessagingPatterns_XPubXSub_Conclusion Summary

In closing, it should be clear that the xPub-xSub paradigm requires marginally more effort than its naive publisher-subscriber counterpart.  However, do not undererestimate the xPub-xSub.  At UUSS this is the mechanism by which we move all of our data packets, all of our probability packets, and STA/LTA packets, as well as all of our picks, events, and module heartbeats.  And the computational cost on the uOperator hub is small.  Long story short, when it comes to solving the broadcast problem, you will be hard-pressed to find a more flexible and scalable approach than the xPub-xSub.

*/
