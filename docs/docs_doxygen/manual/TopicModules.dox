namespace UMPS
{
/*!
\page TopicModules Modules
\ingroup Modules_chapter

<P>
<EM>Modules</EM> are the programs that users will ultimately use.  Modules will do things like pick waveforms and associate events.  For this reason, a module can be thought of as a standalone program.  Modules typically must do multiple things like send status messages and handle commands.  A \a process \a is the basic building block of a module that actually performs the disparate tasks that constitute a module.
</P>

<br><br>

Let's explore in greater detail what a process is and must do


\include umps/modules/process.hpp

<P>
A process consists of a few very simple items
  - A module can be started by either explictly calling <EM>start</EM> or by using the () operator.  In this abstract base class, the default implementation of the operator is to simply call <EM>start</EM>.
  - A module can be stopped with <EM>stop</EM>.
  - A module must be able to report whether or not it is currently running with <EM>isRunning</EM>.
</P>

<P>
A potential point of confusion is that a process \a can \a be multi-threaded.  What this means is that even though a process will likely be started using something of the form std::thread(process), there still may exist a thread-pool within the process's implementation that enables it to achieve its requisite functionality.
</P>

<br><br>

Naturally, it would be convenient to collect all of our processes in one container.  This the job of the ProcessManager.  Specifically, the process manager is a collection of unique processes.  At the time of writing, the process manager is very simple.  It basically can hold, run, and stop all processes.  In time however, we hope it will do really cool things like detect and restart dead processes.

<br><br>

<P>
In parting, note that you do not \a need \a to write your programs using the Process/ProcessManager paradigm.  It exists because I find it convenient and dislike rewriting the same boiler-plate code for common tasks like connecting/querying the uOperator or sending a heartbeat.  Indeed, none of the code to implement these tasks is particularly difficult to write.  What you may, however, find slightly challenging is organizing your code that you can catch exceptions. 
</P>

*/
}
