namespace UMPS
{
/**
\page TopicMessaging Messaging
\ingroup MessagingPatterns_chapter

In this section, we will get into the weeds of messaging. The messaging patterns are build atop ZeroMQ; a light-weight, high-performance messaging library. While I suggest everyone read the ZeroMQ Guide this section should be enough for most users. We will mainly concern ourselves with two types of communication patterns. The first is the Publish-Subscribe pattern. The second is the Request-Reply pattern.
*/

/**
\page TopicMessaging_PubSub Publish Subscribe
\ingroup MessagingPatterns_PubSub

This pattern can be thought of as listening to the radio. The radio (publisher) will broadcast its content. The listener (subscriber) will then tune-in to hear the content. This conceptually simple pattern provides excellent one-to-many scalability. However, the subscriber will miss all content if it is not connected to the data feed. One caveat is that communication is a one-way street in that the publisher broadcasts and the subscriber listens. If your use-case requires the subscriber send information to the publisher then this messaging pattern will not work.
*/

/**
\page TopicMessaging_ReqRep Request Reply
\ingroup MessagingPatterns_ReqRep

The request-reply mechanism is extremely important to UMPS and it is one of UMPS's major improvements over existing seismic processing systems.  Suppose, you are running two instances of a detector - say a P and S-detector - on different machines. The P-detector triggers and a pick is made. How then should you give this pick a unique identification? One solution is to make a request from a service whose entire purpose is to provide unique identifiers. This service could be a database or a standalone program. It does not matter. All that matters is the request can be made by both detectors and the request will be fulfilled by the server.
*/

}
