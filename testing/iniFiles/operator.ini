################################################################################
#                                  General Options                             #
################################################################################
# Overview: uOperator is the service to which you connect to ascertain 
#           connnection information for other services and broadcasts that
#           are more relevant to your aplication.
[uOperator]
# The directory to which module log files will be written.
logFileDirectory = logs

# The server's IP address. 
# (e.g., you can obtain this with systemd-resolve --status | grep Current) 
ipAddress=127.0.0.1

# Open port(s).  Typically we'll want a block of ports to be open so that 
# we can open as many broadcasts/services as necessary for the application.
# The ports begin at the given port beginning and end (inclusively) on the
# ended ports.  There must be at least 3 ports open:
#   (a) 1 port to allow access the connection information
#   (b) 1 port to which to publish heartbeats
#   (c) 1 port from which to read heartbeat subscriptions
openPortBlockStart = 8080
openPortBlockEnd   = 8090


# This defines the security level for all communication.
# 0 -> Grasslands   There is no security.
# 1 -> Strawhouse   IP addresses are checked against a blacklist.
# 2 -> Woodhouse    IP addresses are checked against a blacklist and
#                   users must provide a user/name and password.
# 3 -> Stonehouse   IP addresses are checked against a blacklist and
#                   users must provided a public key.  Users must also
#                   specify a private key.
# 4 -> Ironhouse    Currently unsupported.  But in this model IP addreses
#                   are checked against a blacklist, users must provide a
#                   public key, and the server public key must then be
#                   authenticated by the user.
securityLevel = 0

# If the security level is not grasslands then you can specify where the
# user table, blacklist table, and whitelist table resides ala
#    userTable = /path/to/user.sqlite3
#    blackListTable = /path/to/blacklist.sqlite3
#    whiteListTable = /path/to/whitelist.sqlite3
# By default the tables will be assumed to exist in:
#    ${HOME}/.local/share/UMPS/tables


################################################################################
#                                    Services                                  #
################################################################################
# Overview:
# Services are request/reply mechanisms.  Common service examples are counters
# and waveform caches.  Technically, uOperator is a service but it was already
# specified above.
#################################### Counters ##################################
# Overview:
# Counters are request/reply mechanisms for assigning a unique identifier 
# for an object of interest.  For example, when asked a pick counter will create
# a new, unique pick identifier.  More specifically, counters are
# REQUEST to ROUTER communication pattern.  This is used for an asynchronous
# server that can talk to multiple request clients (the clients here are modules
# that need a unique identifier for a item of interest).
# In the ini file every counter must be specified as "Counter:Name".  Repeating
# this results in undefined behavior.
[Counters:Pick]
# The name of the object being counted.  This must be unique.
name = Pick
# The initial value of a pick identifier.  The default is 0.
initialValue = 0
# Each pick identifier will be increased by this increment.
# This must be at least 1.  The default is 1.
increment = 1
# The server will connect to the router proxy at this address.   
# This address does not need to known to other modules.
# Note the dealer-router incrementer is not yet implemented.
#serverAccessAddress = tcp://localhost:5560
# The clients will connect to the proxy at this address.
#clientAccessAddress = tcp://*:5555
clientAccessAddress = tcp://127.0.0.1:5555
# The counter's logging level:
# 0 = none
# 1 = errors only
# 2 = warnings and errors
# 3 = general information, warnings, and errors
# 4 = all information including debug information
verbose = 1

[Counters:EventIdentifier]
name = Event
initialValue = 500000
increment = 1
# Note this must be unique as not to collide with other services
clientAccessAddress = tcp://127.0.0.1:5556

################################################################################
#                                End Services                                  #
################################################################################

################################################################################
#                              Data Broadcasts                                 #
################################################################################

################################# Broadcasts ###################################
[Broadcasts:EarthwormTraceBuf2]
# Broadcast name
name = EarthwormTraceBuf2
# Directory with earthworm parameters
ewParams = /opt/earthworm/run_working/params
# Directory for earthworm logs
ewLog = /opt/earthworm/run_working/log
# Earthworm institution
ewInstallation = INST_UTAH
# The name of the Earthworm ring with packets to scrape
waveRingName = WAVE_RING
# Milliseconds to wait after reading ring.  This should be non-negative.
clientAccessAddress = tcp://127.0.0.1:5557

#################################################################################
#                            End Data Broadcasts                                #
#################################################################################
